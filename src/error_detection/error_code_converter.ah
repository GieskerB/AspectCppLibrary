#ifndef __ACP__ERROR_CODE_CONVERTER_AH__
#define __ACP__ERROR_CODE_CONVERTER_AH__

#include "../core/core_aspect.ah"
#include "errno_exception.hh"

#include <stdexcept>
#include <cerrno>
#include <cstring>

namespace acp {
	/**
	 * \attribute acp::err_code
	 * \brief Performs an error code convertion, if an std-c-lib error occurs within a pointcut annotated with this attribute.
	 */
	attribute err_code();

	/**
	 * \attribute acp::ignore_err_code
	 * \brief This attribute can be used to exclude certain join points form being affected by this aspect.
	 */
	attribute ignore_err_code();
}

/**
 * \aspect ErrorCodeConverter
 * \file src/error_detection/error_code_converter.ah
 * \brief This aspect is used to convert error codes from standard library functions into exceptions.
 *
 * It checks if errno is set to a non-zero value after a function call and throws an `acp::ErrnoException` with the current value of errno.
 * It is recommended to use this aspect in conjunction with the StackTrace aspect to get a full stack trace.
 */
aspect [[acp::middle_layer]] ErrorCodeConverter : public CoreAspect {

public:

	ErrorCodeConverter() {}
	~ErrorCodeConverter() = default;

	/**
	 * \pointcut where
	 * \see :ref:`CoreAspect::where <core_aspect_ah_where>`
	 */
	pointcut virtual where() = within(acp::err_code());

	/**
	 * \pointcut ignore
	 * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
	 */
	pointcut virtual ignore() = within("ErrorCodeConverter") || within("acp") || within(acp::ignore_err_code()) || within(acp::ignore_everything());

	/**
	 * \advice errno_check
	 * \brief Advice checks if errno is set to a non-zero value after the function call.
	 *
	 * If this conditions is met, it throws an `acp::ErrnoException` with the current value of errno.
	 * It is recommended to use this advice in conjunction with the StackTrace aspect to get a full stack trace.
	 *
	 */
	advice where() && !ignore(): after() {
		// Errno is thread-local, so it can be safely accessed here
		if (errno != 0) {
			acp::ErrnoException exception(errno);
			// Reset errno after capturing it otherwise it will throw the same exception again
			errno = 0;
			throw exception;
		}
	}
};

#endif // __ACP__ERROR_CODE_CONVERTER_AH__
