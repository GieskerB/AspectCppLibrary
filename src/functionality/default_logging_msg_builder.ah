#ifndef __ACP__INTERFACE__DEFAULT_LOGGING_MSG_BUILDER_AH__
#define __ACP__INTERFACE__DEFAULT_LOGGING_MSG_BUILDER_AH__

/**
 * \aspect DefaultLoggingMsgBuilder
 * \file src/functionality/default_logging_msg_builder.ah
 * \brief This aspect is a default implementation of the `LoggingMsgBuilder` interface.
 *
 * It provides the library's default way to build log messages in a specific format.
 * Staticly configuring the implementation project wide at compile time.
 *
 */
aspect DefaultLoggingMsgBuilder {
public:
    DefaultLoggingMsgBuilder() {};
    virtual ~DefaultLoggingMsgBuilder() = default;

    /**
     * \advice build_msg
     * \see :ref:`acp::logging_msg_builder::build_msg <logging_msg_builder_hh_build_msg>`
     */
    advice execution("void acp::logging_msg_builder::build_msg(...)") : around() {
        const std::string& log_type = *static_cast<const std::string*>(tjp->arg(0));
        const std::string& msg = *static_cast<const std::string*>(tjp->arg(1));
        std::string& output = *static_cast<std::string*>(tjp->arg(2));
        if (log_type.empty()) {
            output.append(msg);
        } else if (msg.empty()) {
            output.append("[");
            output.append(log_type);
            output.append("]");
        } else {
            output.append("[");
            output.append(log_type);
            output.append("] ");
            output.append(msg);
        }
    }

    /**
     * \advice build_before_msg
     * \see :ref:`acp::logging_msg_builder::build_before_msg <logging_msg_builder_hh_build_before_msg>`
     */
    advice execution("void acp::logging_msg_builder::build_before_msg(...)") : around() {
        const char* signature = *static_cast<const char**>(tjp->arg(0));
        std::string& output = *static_cast<std::string*>(tjp->arg(1));
        output.clear();
        output.append("[Entering]");
        output.append(signature);
    }

    /**
     * \advice build_after_msg
     * \see :ref:`acp::logging_msg_builder::build_after_msg <logging_msg_builder_hh_build_after_msg>`
     */
    advice execution("void acp::logging_msg_builder::build_after_msg(...)") : around() {
        const char* signature = *static_cast<const char**>(tjp->arg(0));
        std::string& output = *static_cast<std::string*>(tjp->arg(1));
        output.clear();
        output.append("[Leaving]");
        output.append(signature);
    }
};


#endif // __ACP__INTERFACE__DEFAULT_LOGGING_MSG_BUILDER_AH__
