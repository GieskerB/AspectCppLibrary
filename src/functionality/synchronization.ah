#ifndef __ACP__SYNCHRONIZATION_AH__
#define __ACP__SYNCHRONIZATION_AH__

#include "../core/core_aspect.ah"
#include "../core/thread_controller.hh"

#include <functional>

namespace acp {
    /**
     * \attribute synchronized
     * \brief Any function with this attribute can only have one thread at a time executing it
     */
    attribute synchronized();

    /**
     * \attribute acp::ignore_synchronized
     * \brief Ignores synchronization.
     */
    attribute ignore_synchronized();
}

/**
 * \aspect Synchronization
 * \file src/functionality/synchronization.ah
 * \brief This aspect implements a thread execution for selected functions.
 *
 * By using an aspect which implements the thread controller interface, an thread exclusive execution
 * per function is guaranteed. With the use of a mutex any thread will wait until the previous one
 * finished executing the function.
 *
 * There will be no performance loss, if the thread interface is not implemented, but this aspect sill used.
 *
 */
aspect [[acp::inner_layer]] Synchronization : public CoreAspect {

public:
    Synchronization() {}
    virtual ~Synchronization() = default;

     /**
	 * \pointcut ignore
	 * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
	 */
    pointcut virtual ignore() = within("AfterLogging") || within ("acp")|| within(acp::ignore_synchronized()) || within(acp::ignore_everything());

    /**
	 * \pointcut where
	 * \see :ref:`CoreAspect::where <core_aspect_ah_where>`
	 */
    pointcut virtual where() = acp::synchronized();

    /**
     * \aspect threadsafe_execution
     * \brief Wrapping the intended function execution in a mutex lock.
     *
     */
    advice execution(where()) && !ignore() : around() {
        auto proceed_function = [&tjp]() {
            tjp->proceed();
        };

        acp::thread_controller::synchronized_function_call(proceed_function);
    }

};

#endif // __ACP__SYNCHRONIZATION_AH__
