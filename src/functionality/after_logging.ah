#ifndef __ACP__AFTER_LOGGING_AH__
#define __ACP__AFTER_LOGGING_AH__

#include "../core/core_aspect.ah"
#include "../core/printer.hh"
#include "logging_msg_builder.hh"

namespace acp {
    /**
     * \attribute after_logging
     * \brief Functions with this attribute will be logged after their execution.
     */
    attribute after_logging();
}

/**
 * \aspect AfterLogging
 * \file src/functionality/after_logging.ah
 * \brief This aspect is used to log the execution of a function after it has completed.
 *
 * In conjunction with this aspect use an aspect that provides a implementation for the
 * acp::logging_msg_builder::build_after_msg() method.
 *
 * Similar to the `BeforeLogging` aspect, this aspect logs the function signature - but only - after the function has executed.
 *
 */
aspect AfterLogging : public CoreAspect {

    acp::Printer* _printer;

public:

    /**
	 * \pointcut ignore
	 * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
	 */
    pointcut virtual ignore() = within("AfterLogging") || within ("acp");

    /**
	 * \pointcut where
	 * \see :ref:`CoreAspect::where <core_aspect_ah_where>`
	 */
    pointcut virtual where() = acp::after_logging();

    AfterLogging() : AfterLogging(nullptr) {}
    AfterLogging(acp::Printer* printer) : _printer(printer) {}

    virtual ~AfterLogging() {
        delete _printer;
    }

    /**
     * \advice logging-advice
     * \brief This advice handles the logging behavior after the function execution.
     */
    advice execution(where()) && !ignore() : after() {
        std::string msg;
        acp::logging_msg_builder::build_after_msg(tjp->signature(), msg);
        _printer->print(msg);
        _printer->print('\n');
    }

};

#endif // __ACP__AFTER_LOGGING_AH__
