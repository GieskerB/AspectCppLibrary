#ifndef __ACP__RESULT_CACHE_AH__
#define __ACP__RESULT_CACHE_AH__

#include "../core/core_aspect.ah"

#include <any>

namespace acp {
    attribute cache();
}

aspect ResultCache : public CoreAspect{

    public:

    ResultCache() {}
    virtual ~ResultCache() = default;

    /**
	 * \pointcut ignore
	 * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
	 */
    pointcut virtual ignore() = within("AfterLogging") || within ("acp");

    /**
	 * \pointcut where
	 * \see :ref:`CoreAspect::where <core_aspect_ah_where>`
	 */
    pointcut virtual where() = acp::cache();

    advice execution(where()) && !ignore() : around() {
        static std::any last_result;

        // Get the result from tjp

        // Only store the result if last_result is empty
        if (last_result.has_value() == false) {
            tjp->proceed();
            JoinPoint::That* result_ptr = tjp->result();
            last_result = result_ptr;
        } else {
            *tjp->result() = static_cast<JoinPoint::That*>(std::any_cast<int*>(last_result));
        }

    }

};

#endif // __ACP__RESULT_CACHE_AH__
