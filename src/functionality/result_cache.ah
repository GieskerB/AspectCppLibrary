#ifndef __ACP__RESULT_CACHE_AH__
#define __ACP__RESULT_CACHE_AH__

#include "../core/core_aspect.ah"
#include "../core/thread_controller.hh"

#include <unordered_map>

namespace acp {

    /**
     * \attribute acp::cache
	 * \brief Triggers a cache usage for marked join points.
	 *
	 * This attribute makes a join points, for which a result cache should be used.
     */
    attribute cache();

    /**
     * \attribute acp::ignore_cache
     * \brief This attribute can be used to exclude certain join points form being affected by this aspect.
     *
     * If a scope already is annotated with this aspect's attribute, individual join points within can be
     * excluded with this attribute.
     */
    attribute ignore_cache();
}

/**
 * \aspect ResultCache
 * \file src/functionality/result_cache.ah
 * \brief This aspect caches the result of a function based on its arguments.
 *
 * To potentially reduce runtime this aspects checks a result cache per join point to see if the same inputs
 * were inserted previously. In that case simple return the value from the cache instead of recalculation it.
 * Make sure to only use this aspect on functions there the output is only dependent on the arguments and
 * nothing more like global or member variables.
 * Unfortunately, it does only work is all operators are standard primitive data types, due to limitations
 * in the AspectC++ language. It is currently not possible to get the type of each parameter directly which
 * is necessary for correct hasing.
 */
aspect [[acp::inner_layer]] ResultCache : public CoreAspect {

    /// Checks if arguments is a primitive based on string representation of tjp->argtype
    constexpr static bool is_primitive(const char type) {
        if(type == 'c' or // char
           type == 'h' or // unsigend char
           type == 'i' or // int
           type == 'j' or // unsigned int
           type == 's' or // short
           type == 't' or // unsigend short
           type == 'l' or // long
           type == 'm' or // unsigend long long
           type == 'x' or // long long
           type == 'y' or // unsigned long long
           type == 'f' or // float
           type == 'd' or // double
           type == 'b') {// bool
            return true;
        }
        return false;
    }

    /// Calculate hash of every primitive data type by first casting it correctly.
    constexpr static size_t calc_hash(void* arg, const char type) {
        if (type == 'c') {  // char
            return std::hash<char>{}(*static_cast<char*>(arg));
        } else if (type == 'h') {  // unsigned char
            return std::hash<unsigned char>{}(*static_cast<unsigned char*>(arg));
        } else if (type == 'i') {  // int
            return std::hash<int>{}(*static_cast<int*>(arg));
        } else if (type == 'j') {  // unsigned int
            return std::hash<unsigned int>{}(*static_cast<unsigned int*>(arg));
        } else if (type == 's') {  // short
            return std::hash<short>{}(*static_cast<short*>(arg));
        } else if (type == 't') {  // unsigned short
            return std::hash<unsigned short>{}(*static_cast<unsigned short*>(arg));
        } else if (type == 'l') {  // long
            return std::hash<long>{}(*static_cast<long*>(arg));
        } else if (type == 'm') {  // unsigned long
            return std::hash<unsigned long>{}(*static_cast<unsigned long*>(arg));
        } else if (type == 'x') {  // long long
            return std::hash<long long>{}(*static_cast<long long*>(arg));
        } else if (type == 'y') {  // unsigned long long
            return std::hash<unsigned long long>{}(*static_cast<unsigned long long*>(arg));
        } else if (type == 'f') {  // float
            return std::hash<float>{}(*static_cast<float*>(arg));
        } else if (type == 'd') {  // double
            return std::hash<double>{}(*static_cast<double*>(arg));
        } else if (type == 'b') {  // bool
            return std::hash<bool>{}(*static_cast<bool*>(arg));
        }
        return 0;
    }

    /// Calculate hash of every primitive pointer type by first casting it correctly.
    /// need more functions for more and more nested pointers (int*****)
    constexpr static size_t calc_hash_ptr(void* arg, const char type) {
        if (type == 'c') {  // char
            return std::hash<char>{}(**static_cast<char**>(arg));
        } else if (type == 'h') {  // unsigned char
            return std::hash<unsigned char>{}(**static_cast<unsigned char**>(arg));
        } else if (type == 'i') {  // int
            return std::hash<int>{}(**static_cast<int**>(arg));
        } else if (type == 'j') {  // unsigned int
            return std::hash<unsigned int>{}(**static_cast<unsigned int**>(arg));
        } else if (type == 's') {  // short
            return std::hash<short>{}(**static_cast<short**>(arg));
        } else if (type == 't') {  // unsigned short
            return std::hash<unsigned short>{}(**static_cast<unsigned short**>(arg));
        } else if (type == 'l') {  // long
            return std::hash<long>{}(**static_cast<long**>(arg));
        } else if (type == 'm') {  // unsigned long
            return std::hash<unsigned long>{}(**static_cast<unsigned long**>(arg));
        } else if (type == 'x') {  // long long
            return std::hash<long long>{}(**static_cast<long long**>(arg));
        } else if (type == 'y') {  // unsigned long long
            return std::hash<unsigned long long>{}(**static_cast<unsigned long long**>(arg));
        } else if (type == 'f') {  // float
            return std::hash<float>{}(**static_cast<float**>(arg));
        } else if (type == 'd') {  // double
            return std::hash<double>{}(**static_cast<double**>(arg));
        } else if (type == 'b') {  // bool
            return std::hash<bool>{}(**static_cast<bool**>(arg));
        }
        return 0;
    }

    public:

    ResultCache() {}
    virtual ~ResultCache() = default;

    /**
	 * \pointcut ignore
	 * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
	 */
    pointcut virtual ignore() = within("AfterLogging") || within ("acp") || execution(acp::ignore_cache()) || execution(acp::ignore_everything());

    /**
	 * \pointcut where
	 * \see :ref:`CoreAspect::where <core_aspect_ah_where>`
	 */
    pointcut virtual where() = execution(acp::cache());

    /**
     * \advice caching-advice
     * \brief This advice caches the result of a function based on its arguments.
     */
    advice where() && !ignore() : around() {
        static std::unordered_map<std::size_t, JoinPoint::Result> cache;

        bool all_primitive = tjp->args() > 0;
        std::size_t hash = 0;
        for(int i = 0; i< tjp->args();++i) {
            std::string arg_type = tjp->argtype(i);
            // Calculate hash based on the argument type
            if(arg_type.size() == 1 && is_primitive(arg_type[0])) {
                hash += calc_hash(tjp->arg(i), arg_type[0]);
            } else if (arg_type.size() == 2 and arg_type[0] == 'P' and is_primitive(arg_type[1])) {
                hash += calc_hash_ptr(tjp->arg(i), arg_type[1]);
            } else {
                all_primitive = false;
                break;
            }
        }

        acp::thread_controller::acquire_global_lock();

        if(all_primitive and cache.find(hash) != cache.end()) {
            // Cache hit
            *tjp->result() = cache[hash];
            acp::thread_controller::release_global_lock();
        } else {
            // Cache miss
            acp::thread_controller::release_global_lock();
            tjp->proceed();
            if(all_primitive) {
                acp::thread_controller::acquire_global_lock();
                cache[hash] = *static_cast<JoinPoint::Result*>(tjp->result());
                acp::thread_controller::release_global_lock();
            }
        }
    }

};

#endif // __ACP__RESULT_CACHE_AH__
