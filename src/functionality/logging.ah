#ifndef __ACP__LOGGING_AH__
#define __ACP__LOGGING_AH__


#include "../core/core_aspect.ah"
#include "../core/printer.hh"

namespace acp {
    /**
     * \attribute after_logging
     * \brief Functions with this attribute will be logged after their execution.
     */
    attribute after_logging();

    /**
     * \attribute around_logging
     * \brief Functions with this attribute will be logged before and after their execution.
     */
    attribute around_logging();

    /**
     * \attribute before_logging
     * \brief Functions with this attribute will be logged before their execution.
     */
    attribute before_logging();
}

/**
 * \aspect Logging
 * \file src/functionality/logging.ah
 * \brief This aspect is used to log the execution of a function.
 *
 * This aspect supports three different attributes: acp::after_logging, acp::around_logging and acp::before_logging.
 * Depending on the choosen attribute the logging happens at the expected point relative to the execution
 *
 * Similar to the `AfterLogging` aspect, this aspect logs the function signature - but only - before the function will execute.
 *
 */
aspect Logging : public CoreAspect {

    acp::Printer* _printer;

protected:

    /**
     * \function build_msg
     * \brief A function to build a general log message.
     *
     * \param log_type The type of log message (e.g., "INFO", "ERROR", etc.).
     * \param msg The message to log.
     * \param output The output string where the built message will be stored.
     */
    inline static void build_msg(const std::string& log_type, const std::string& msg, std::string& output) {
        output.clear();
        if (log_type.empty()) {
            output.append(msg);
        } else if (msg.empty()) {
            output.append("[");
            output.append(log_type);
            output.append("]");
        } else {
            output.append("[");
            output.append(log_type);
            output.append("] ");
            output.append(msg);
        }
    };

    /**
     * \function build_before_msg
     * \brief A function to build a log message specifically for the LoggingAspect.
     *
     * \param signature The signature of the function being logged.
     * \param output The output string where the built message will be stored.
     */
    inline static void build_before_msg(const char* signature, std::string& output) {
        output.clear();
        output.append("[Entering]");
        output.append(signature);
    }

    /**
     * \function build_after_msg
     * \brief A function to build a log message specifically for the AfterLoggingAspect.
     *
     * \param signature The signature of the function being logged.
     * \param output The output string where the built message will be stored.
     */
    inline static void build_after_msg(const char* signature, std::string& output) {
        output.clear();
        output.append("[Leaving]");
        output.append(signature);
    }


public:

     /**
	 * \pointcut ignore
	 * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
	 */
    pointcut virtual ignore() = within("Logging") || within ("acp");

    /**
	 * \pointcut where
	 * \see :ref:`CoreAspect::where <core_aspect_ah_where>`
     *
     * A little bonus for this aspect is that there are 3 attributes [after, around, before]
     * Since, where can no be every attribute at once, the around_logging is the default
     * implementation. However, separate advices for the remaining attributes is provided anyways.
     *
	 */
    pointcut virtual where() = acp::around_logging();

    Logging(): Logging(nullptr) {}
    Logging(acp::Printer* printer)
        : _printer(printer) {}

    virtual ~Logging() {
        delete _printer;
    }

    /**
     * \advice logging-advice[after]
     * \brief This advice handles the logging behavior after the function executes.
     */
    advice execution(acp::after_logging()) && !ignore() : after() {
        std::string msg;
        build_after_msg(tjp->signature(), msg);
        _printer->print(msg);
        _printer->print('\n');
    }

    /**
     * \advice logging-advice[around]
     * \brief This advice handles the logging behavior before and after the function executes.
     */
    advice execution(where()) && !ignore() : around() {
        std::string msg;
        build_before_msg(tjp->signature(), msg);
        _printer->print(msg);
        _printer->print('\n');
        tjp->proceed();
        build_after_msg(tjp->signature(), msg);
        _printer->print(msg);
        _printer->print('\n');
    }

    /**
     * \advice logging-advice[before]
     * \brief This advice handles the logging behavior before the function executes.
     */
    advice execution(acp::before_logging()) && !ignore() : before() {
        std::string msg;
        build_before_msg(tjp->signature(), msg);
        _printer->print(msg);
        _printer->print('\n');
    }

};

#endif // __ACP__LOGGING_AH__
