#ifndef __ACP__BEFORE_LOGGING_AH__
#define __ACP__BEFORE_LOGGING_AH__

#include "../core/core_aspect.ah"
#include "../core/printer.hh"
#include "logging_msg_builder.hh"

namespace acp {
    /**
     * \attribute before_logging
     * \brief Functions with this attribute will be logged before their execution.
     */
    attribute before_logging();
}

/**
 * \aspect BeforeLogging
 * \file src/functionality/before_logging.ah
 * \brief This aspect is used to log the execution of a function before it will execute.
 *
 * In conjunction with this aspect use an aspect that provides a implementation for the
 * acp::logging_msg_builder::build_after_msg() method.
 *
 * Similar to the `AfterLogging` aspect, this aspect logs the function signature - but only - before the function will execute.
 *
 */
aspect BeforeLogging : public CoreAspect {

    acp::Printer* _printer;

public:

     /**
	 * \pointcut ignore
	 * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
	 */
    pointcut virtual ignore() = within("BeforeLogging") || within ("acp");

    /**
	 * \pointcut where
	 * \see :ref:`CoreAspect::where <core_aspect_ah_where>`
	 */
    pointcut virtual where() = acp::before_logging();

    BeforeLogging(): BeforeLogging(nullptr) {}
    BeforeLogging(acp::Printer* printer)
        : _printer(printer) {}

    virtual ~BeforeLogging() {
        delete _printer;
    }

    /**
     * \advice logging-advice
     * \brief This advice handles the logging behavior before the function executes.
     */
    advice execution(where()) && !ignore() : before() {
        std::string msg;
        acp::logging_msg_builder::build_before_msg(tjp->signature(), msg);
        _printer->print(msg);
        _printer->print('\n');
    }

};

#endif // __ACP__BEFORE_LOGGING_AH__
