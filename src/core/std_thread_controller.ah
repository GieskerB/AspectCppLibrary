#ifndef __ACP__INTERFACE_STD_THREAD_CONTROLLER_HH__
#define __ACP__INTERFACE_STD_THREAD_CONTROLLER_HH__

#include <mutex>
#include <thread>
#include "thread_controller.hh"

/**
 * \aspect StdThreadController
 * \file src/core/std_thread_controller.hh
 * \brief Standard thread controller using std::mutex.
 *
 * This class implements the ThreadController interface using std::mutex for thread safety.
 * It provides methods to acquire and release locks, and to get the unique identifier of the current thread.
 */
aspect StdThreadController{

    mutable std::mutex _mutex;

public:

    StdThreadController() {}
    virtual ~StdThreadController() = default;

    /**
    * \advice acquire_lock
    * \see :ref:`acp::thread_controller::acquire_lock <thread_controller_hh_acquire_lock>`
    */
    advice execution("void acp::thread_controller::acquire_global_lock()"): around() {
        _mutex.lock();
    }

    /**
    * \advice release_lock
    * \see :ref:`acp::thread_controller::release_lock <thread_controller_hh_release_lock>`
    */
    advice execution("void acp::thread_controller::release_global_lock()"): around() {
        _mutex.unlock();
    }

    /**
     * \advice synchronized_advice
     * \see :ref:`acp::thread_controller::synchronized_function_call <thread_controller_hh_synchronized_function_call>`
     */
    advice execution("void acp::thread_controller::synchronized_function_call(...)"): around() {
        static std::mutex mutex;
        mutex.lock();
        (reinterpret_cast<void(*)()>(reinterpret_cast<uintptr_t>(tjp->arg(0))))();
        mutex.unlock();
    }

    /**
    * \advice get_id
    * \see :ref:`acp::thread_controller::get_id <thread_controller_hh_get_id>`
    */
    advice execution("int acp::thread_controller::get_id()"): around() {
        std::hash<std::thread::id> hasher;
        *tjp->result() = static_cast<int>(hasher(std::this_thread::get_id()));
    }
};

#endif // __ACP__INTERFACE_STD_THREAD_CONTROLLER_HH__
