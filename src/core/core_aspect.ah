#ifndef __ACP__CORE_ASPECT_AH__
#define __ACP__CORE_ASPECT_AH__

#include "predefined_pointcuts.ah"

namespace acp {

	/**
	 * \attribute inner_layer
	 * \brief This attributes defines a weaving order layer for aspects.
	 *
	 * Alongside the two other attributes outer- and middle_layer these attributes
	 * provide a simple way of ordering aspect in the weaving process. Imagine the
	 * "core" to be the original function and then all aspects annotated with
	 * acp::inner_layer are weaved before the other two. Within all aspects from the
	 * same layer is no further order.
	 */
	attribute inner_layer();

	/**
	 * \attribute middle_layer
	 * \brief This attributes defines a weaving order layer for aspects.
	 *
	 * Alongside the two other attributes outer- and inner_layer these attributes
	 * provide a simple way of ordering aspect in the weaving process. Imagine the
	 * "core" to be the original function and then all aspects annotated with
	 * acp::middle_layer are weaved between the other two. Within all aspects from the
	 * same layer is no further order.
	 */
	attribute middle_layer();

	/**
	 * \attribute outer_layer
	 * \brief This attributes defines a weaving order layer for aspects.
	 *
	 * Alongside the two other attributes middle- and inner_layer these attributes
	 * provide a simple way of ordering aspect in the weaving process. Imagine the
	 * "core" to be the original function and then all aspects annotated with
	 * acp::outer_layer are weaved after the other two. Within all aspects from the
	 * same layer is no further order.
	 */
	attribute outer_layer();


	/**
	 * \attribute ignore_everything
	 * \brief This attribute can be used to remove every aspect form a specific join point.
	 * Many attributes can be used for an entire class or namespace. In case you want to
	 * exclude only a few join points from the weaving process, you can use this attribute.
	 *
	 * Use this attribute with caution due to its huge impact on EVERY aspect from this library!
	 */
	attribute ignore_everything();
}

/**
 * \aspect CoreAspect
 * \file src/core/core_aspect.ah
 * \brief CoreAspect is the base aspect for all aspects in this ACP library.
 *
 * CoreAspect defines base for all main aspects of this library. It ensures that all aspects
 * have a where pointcut and an ignore pointcut.
 * The where pointcut is used in the main advice of each aspect. It denotes on which join
 * points (where the aspect should be applied).
 * The ignore pointcut is used to define which join points should be ignored by the aspect.
 */
aspect CoreAspect {

public:

	/**
	 * \pointcut where
	 * \file src/core/core_aspect.hh
	 * \brief A virtual placeholder for the pointcut that is used in the main advice of each aspect.
	 *
	 * This pointcut is can be overridden by derived aspects if they want to change it form the
	 * default implementation.
	 */
	pointcut virtual where() = 0;

	/**
	 * \pointcut ignore
	 * \brief A virtual placeholder for the pointcut that describes which join points should be ignored by the aspect.
	 *
	 * It is recommended to use and extend a pointcut definition like with:
	 * within("<AspectName>") || within("acp")
	 * As well as the execution of the aspect specific ignore attributes.
	 */
	pointcut virtual ignore() = 0;

	CoreAspect() = default;
	virtual ~CoreAspect() {}

	/**
	 * \advice ordering
	 * \brief This advice defines the order of the aspects in the weaving process.
	 *
	 * Naming of the layers is relative to the "distance" to the function which represents the core.
	 * In case of before advices the outer layer is weaved first, then the middle layer and finally
	 * the inner layer. For after advices this is the other way around and for around advice it is a
	 * capsulation with results in the same order as for the before and after advices combined.
	 */
    advice execution(acp::all_func()) : order(acp::inner_layer(), acp::middle_layer(), acp::outer_layer());

};

#endif // __ACP__CORE_ASPECT_AH__
