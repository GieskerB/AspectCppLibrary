#ifndef __ACP__CORE_ASPECT_AH__
#define __ACP__CORE_ASPECT_AH__

#include "predefined_pointcuts.ah"

/**
 * \aspect CoreAspect
 * \file src/core/core_aspect.ah
 * \brief CoreAspect is the base aspect for all aspects in this ACP library.
 *
 * CoreAspect defines base for all main aspects of this library. It ensures that all aspects
 * have a where pointcut and an ignore pointcut.
 * The where pointcut is used in the main advice of each aspect. It denotes on which join
 * points (where the aspect should be applied).
 * The ignore pointcut is used to define which join points should be ignored by the aspect.
 */
aspect CoreAspect {

public:

	/**
	 * \pointcut where
	 * \file src/core/core_aspect.hh
	 * \brief A virtual placeholder for the pointcut that is used used in the main
	 * advice of each aspect.
	 *
	 * This pointcut is can be overridden by derived aspects if they want to change it
	 * form the default implementation.
	 * The default implementation is the default_where() pointcut.
	 */
	pointcut virtual where() = 0;

	/**
	 * \pointcut ignore
	 * \brief A virtual placeholder for the pointcut that describes which join points
	 * should be ignored by the aspect.
	 *
	 * It is recommended to use and extend a pointcut definition like with:
	 * "% <AspectName>::...::%(...)" || "% acp::...::%(...)"
	 */
	pointcut virtual ignore() = 0;

	CoreAspect() = default;
	virtual ~CoreAspect() {}

    advice execution(acp::all_func()) : order(derived("HighPriority"),derived("MediumPriority"),derived("LowPriority"));
    // advice execution(acp::all_func()) : order("HighPriority","MediumPriority","LowPriority");
    // advice execution(acp::all_func()) : order("Last","First");

};

#endif // __ACP__CORE_ASPECT_AH__
