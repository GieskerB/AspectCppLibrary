#ifndef __ACP__INTERFACE_DEFAULT_STACK_TRACE_MSG_BUILDER_AH__
#define __ACP__INTERFACE_DEFAULT_STACK_TRACE_MSG_BUILDER_AH__

#include <string>

#include "../core/custom_to_string.hh"
#include "stack_trace_msg_builder.hh"

/**
 * \aspect DefaultStackTraceMsgBuilder
 * \file src/error_handling/default_stack_trace_msg_builder.ah
 * \brief DefaultStackTraceMsgBuilder is the default implementation of the StackTraceMsgBuilder interface.
 *
 * This aspect staticly configures the implementation of the function form the interface during compilation.
 *
 */
aspect DefaultStackTraceMsgBuilder{
public:

    DefaultStackTraceMsgBuilder() = default;
    virtual ~DefaultStackTraceMsgBuilder() {}

    /**
     * \advice build_msg
     * \see :ref:`acp::stack_trace_msg_builder::build_msg <stack_trace_msg_builder_hh_build_msg>`
     */
    advice execution("void acp::stack_trace_msg_builder::build_msg(...)") : around(){

        const char* signature = *static_cast<char**>(tjp->arg(0));
        const char* file = *static_cast<char**>(tjp->arg(1));
        int line = *static_cast<int*>(tjp->arg(2));
        std::string& result = *static_cast<std::string*>(tjp->arg(3));

        char buffer[12];
        acp::to_string(buffer, line, sizeof(buffer));
        result.clear();
        result.append("at ");
        result.append(signature);
        result.append(" in (");
        result.append(file);
        result.append(":");
        result.append(buffer);
        result.append(")\n");
    }

};


#endif  // __ACP__INTERFACE_DEFAULT_STACK_TRACE_MSG_BUILDER_AH__
