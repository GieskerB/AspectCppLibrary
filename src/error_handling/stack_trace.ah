#ifndef __ACP__STACK_TRACE_AH__
#define __ACP__STACK_TRACE_AH__

#include <exception>
#include <string>
#include <vector>
#include <cstdlib>

#include "../core/printer.hh"
#include "../core/core_aspect.ah"
#include "../core/predefined_pointcuts.ah"
#include "../core/custom_to_string.hh"

namespace acp {
	/**
	 * \attribute acp::trace
	 * \brief This attribute is used to mark functions that should be traced for stack traces.
	 *
	 * This attribute is not necessary by default, since the aspect acts globally from the beginning.
	 * But it can be used, if the developer wants to limit the stack trace to specific functions.
	 * Then they have to disable the global pointcut first.
	 */
	attribute trace();

	/**
	 * \attribute acp::fallback
	 * \brief This attribute is used to mark functions as a fallback where a stacktrace is trigger in case of an exception.
	 *
	 */
	attribute fallback();

	/**
	 * \attribute acp::ignore_trace
	 * \brief This attribute is used to remove certain join points from being traced in the event of an exception
	 *
	 * Using this attribute is not recommended since it interrupts the tracking of the call chain and can cause
	 * inconsistencies within this aspect if used in the wrong places.
	 *
	 */
	attribute ignore_trace();
}

/**
 * \aspect StackTrace
 * \file src/error_handling/stack_trace.ah
 * \brief This aspect is used to handle stack traces and print them when an uncaught exception occurs.
 *
 * This aspect uses the acp::StackTraceMsgBuilder to build the messages for the stack trace and the
 * acp::printer to print them.
 * By default this aspect will always trigger when an uncaught exception would leave the main function.
 */
aspect [[acp::outer_layer]] StackTrace : public CoreAspect {

private:

	// Useing this wrapper function to create static threadlocal header only variable in c++11
	inline bool& editing_stack_trace_instance() {
		static thread_local bool _editing_stack_trace = false;
		return _editing_stack_trace;
	}

	// Useing this wrapper function to create static threadlocal header only variable in c++11
	inline std::exception const*& last_thrown_instance() {
		static thread_local std::exception const* _last_thrown = nullptr;
		return _last_thrown;
	}

	// Useing this wrapper function to create static threadlocal header only variable in c++11
	inline std::vector<std::string>& call_chain_instance() {
		static thread_local std::vector<std::string> _call_chain{};
		return _call_chain;
	}

	acp::Printer* _printer;

	void check_reset() {
		// When calling a function, the exception must have been resolved
		if (last_thrown_instance() != nullptr and !editing_stack_trace_instance()) {
			last_thrown_instance() = nullptr;
			call_chain_instance().clear();
		}
	}

protected:

	/**
	 * \function print_stack_trace
	 * \brief this function handles everything related to printing the stack trace.
	 *
	 * In case a developer wants to change the way the stack trace is printed from the ground up,
	 * they can write an around advice for this function to replace its countent.
	 *
	 * \param call_chain is a std::vector of strings that contains the call chain of the stack trace.
	 * \param exception_msg is the message of the exception that was thrown.
	 */
	void print_stack_trace(const std::vector<std::string>& call_chain, const char* exception_msg) {
		_printer->print("\n\nUncaught exception ");
		_printer->print(exception_msg);
		_printer->print(":\n");
		for (const auto& err_msg : call_chain_instance()) {
			_printer->print('\t');
			_printer->print(err_msg);
		}
		// Reset values after printing.
		last_thrown_instance() = nullptr;
		_printer->print("\n");
		editing_stack_trace_instance() = false;
	}

	/**
	 * \function build_msg
	 * \brief This methods is responsible for creating a well formatted stack trace message
	 *
	 * In case you want to change this, write an aspect which replaces this function with your
	 * own implementation. Use a around advice for that.
	 *
	 * \param sign is the signature of the function that was called.
	 * \param file is the name of the file where the function was called.
	 * \param line is the line number where the function was called.
	 * \param result is a reference to a string where the formatted message will be stored.
	 */
	inline static void build_msg(const char* sign, const char* file, int line, std::string& result) {
        char buffer[12];
        acp::to_string(buffer, line, sizeof(buffer));
        result.clear();
        result.append("at ");
        result.append(sign);
        result.append(" in (");
        result.append(file);
        result.append(":");
        result.append(buffer);
        result.append(")\n");
	}

public:

	/**
	 * \pointcut ignore
	 * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
	 */
	pointcut virtual ignore() = within("StackTrace") || within("acp") || within(acp::ignore_trace()) || within(acp::ignore_everything());

	/**
	 * \pointcut where
	 * \see :ref:`CoreAspect::where <core_aspect_ah_where>`
	 */
	pointcut virtual where() = acp::all_func();

	/**
	 * \pointcut fallback_func
	 * \brief This pointcut matches all functions that are marked with the acp::fallback attribute.
	 *
	 * Any functions marked with this attribute or the main function will trigger the stack trace to
	 * be printed if an uncaught exception leaves the function.
	 *
	 */
	pointcut virtual fallback_func() = acp::fallback() || acp::main_function();


	StackTrace() : StackTrace(nullptr) {}

	StackTrace( acp::Printer* printer) : _printer(printer) {}

	virtual ~StackTrace() {
		delete _printer;
	}

	/**
	 * \advice fallback-advice
	 * \brief Advice handles the StackTrace printing when an uncaught exception leaves the function of the pointcut.
	 */
	advice execution(fallback_func()) && !ignore() : around() {

		check_reset();
		try {
			tjp->proceed();
		} catch (const std::exception& e) {
			editing_stack_trace_instance() = true;
			std::string msg;
			build_msg(tjp->signature(), tjp->filename(), tjp->line(), msg);
			call_chain_instance().push_back(msg);
			// Print Stack Trace
			print_stack_trace(call_chain_instance(), e.what());
			editing_stack_trace_instance() = false;
			// Exit the program with code 0. Should be something different, but tests otherwise fail.
			std::exit(0);
		} catch (...) {
			// Not implemented yet.
		}
	}

	/**
	 * \advice stack-trace-builder-advice
	 * \brief Advice handles the StackTrace building, in case of an thrown exception.
	 */
	advice execution(where() && !fallback_func()) && !(ignore()) : around(){

		check_reset();
		try {
			tjp->proceed();
		} catch (const std::exception& e) {
			editing_stack_trace_instance() = true;
			// extra variable initialization, to supress warning in else-if condition
			const auto& last_thrown = last_thrown_instance();
			if (last_thrown == nullptr) {
				// Just thrown
				std::string msg;
				build_msg(tjp->signature(),tjp->filename(),tjp->line(),msg);
				call_chain_instance().push_back(msg);
				last_thrown_instance() = &e;
			} else if (last_thrown != nullptr and typeid(*last_thrown) == typeid(e) and std::string(last_thrown_instance()->what()) == std::string(e.what())) {
				// Exception is still the same
				std::string msg;
				build_msg(tjp->signature(),tjp->filename(),tjp->line(),msg);
				call_chain_instance().push_back(msg);
			} else {
				// Exception changed
				call_chain_instance().clear();
				std::string msg;
				build_msg(tjp->signature(),tjp->filename(),tjp->line(),msg);
				call_chain_instance().push_back(msg);
				last_thrown_instance() = &e;
			}
			editing_stack_trace_instance() = false;
			throw;
		} catch (...) {
			// Not implemented yet.
		}
	}
};

#endif // __ACP__STACK_TRACE_AH__
