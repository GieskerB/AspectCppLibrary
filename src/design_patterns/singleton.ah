#ifndef __ACP__SINGLETON_AH__
#define __ACP__SINGLETON_AH__

#include "../core/core_aspect.ah"
#include "../core/thread_controller.hh"

namespace acp {
    /**
     * \attribute acp::singleton
     * \brief Changes all marked class join points into a singleton.
     *
     * This attribute marks a class join point, on which the Singleton aspect should be applied.
     */
    attribute singleton();

    /**
     * \attribute acp::ignore_singleton
     * \brief This attribute can be used to exclude certain join points form being affected by this aspect.
     *
     * If a scope already is annotated with this aspect's attribute, individual join points within can be
     * excluded with this attribute.
     */
    attribute ignore_singleton();
    slice class ACP_Singleton_Slice {

        static bool acp_singleton_allow_construction;

    public:
        static JoinPoint::That& get_instance() {
            // This part can not be done 100% thread-safe, but it is sufficient for most use cases.
            acp_singleton_allow_construction = true;
            static JoinPoint::That instance{};
            acp_singleton_allow_construction = false;
            return instance;
        }
    };

    slice bool ACP_Singleton_Slice::acp_singleton_allow_construction = false;
}

/**
 * \aspect Singleton
 * \file src/design_patterns/singleton.ah
 * \brief This aspect implements the Singleton design pattern.
 *
 * This aspect ensures that any class annotated with this specific attribute can have only
 * one instance and provides a global access point to that instance. A static get_instance()
 * method is provided to retrieve the instance, and construction of the singleton instance.
 *
 * When calling any constructor of a class annotated with this aspect, a runtime error will
 * be thrown.
 */
aspect [[acp::inner_layer]] Singleton : public CoreAspect {

    public:

     /**
     * \pointcut where
     * \see :ref:`CoreAspect::where <core_aspect_ah_where>`
     */
    pointcut virtual where() = acp::singleton();

    /**
     * \pointcut ignore
     * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
     */
    pointcut virtual ignore() =  acp::ignore_singleton() || acp::ignore_everything();

    Singleton() {}
    virtual ~Singleton() = default;

    /**
     * \advice singleton-slice
     * \brief This advice make the target class a singleton by adding the special slice.
     */
    advice where() && !ignore() : slice acp::ACP_Singleton_Slice;

    /**
     * \advice construction-prevention
     * \brief This advice prevents the construction of a singleton class directly.
     */
    advice construction(where() && !ignore()) : around() {
        acp::thread_controller::acquire_global_lock();
        if(JoinPoint::That::acp_singleton_allow_construction) {
            tjp->proceed();
            acp::thread_controller::release_global_lock();
        } else {
            acp::thread_controller::release_global_lock();
            throw std::runtime_error("Singleton construction is not allowed. Use get_instance() instead.");
        }
    }
};

#endif // __ACP__SINGLETON_AH__
