#ifndef __ACP__NULLPTR_CHECK_AH__
#define __ACP__NULLPTR_CHECK_AH__

#include "../core/core_aspect.ah"
#include "../core/medium_priority.ah"
#include "nullptr_exception.hh"

namespace acp {
    /**
     * \attribute null_check()
     * \brief For all pointer dereferencing within any function / class / namespace
     * annotated with this attribute an nullptr check will be performed. In case this
     * happens, an exception will be thrown.
     */
    attribute null_check();
}

/**
 * \aspect NullptrCheck
 * \file /src/bug_detection/nullptr_check.ah
 * \brief Aspect that checks for null pointer dereferences.
 *
 * This aspect provides an advice to check if a pointer is null before dereferencing it.
 * Unfortunately, it does not work with the -> operator, due to limitations in the AspectC++
 * language and the way the builtin -> operator is defined.
 *
 */
aspect NullptrCheck : public CoreAspect, public MediumPriority {

    pointcut dereferencing_pointer() = builtin("%& operator *(%*)");

public:

    NullptrCheck() {}
    virtual ~NullptrCheck() = default;

    /**
     * \pointcut where
     * \see :ref:`CoreAspect::where <core_aspect_ah_where>`
     */
    pointcut virtual where() = acp::null_check();

    /**
     * \pointcut ignore
     * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
     */
    pointcut virtual ignore() = within("NullptrCheck") || within("acp");

    /**
     * \advice nullptr_check
     * \brief Advice checks if a pointer is null before dereferencing it.
     *
     * If the pointer is null, it throws a `acp::NullptrException` with a message indicating that
     * a null pointer was dereferenced.
     */
    advice within(where()) && dereferencing_pointer() && !ignore(): before() {
        // Just casting to int* to check if the pointer is null.
        if (*((int *)tjp->arg(0)) == 0) {
            throw acp::NullptrException(tjp->signature(), tjp->line());
        }
    }


};

#endif // __ACP__NULLPTR_CHECK_AH__
