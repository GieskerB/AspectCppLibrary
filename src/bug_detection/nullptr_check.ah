#ifndef __ACP__NULLPTR_CHECK_AH__
#define __ACP__NULLPTR_CHECK_AH__

#include "../core/core_aspect.ah"
#include "nullptr_exception.hh"

namespace acp {
     /**
     * \attribute acp::null_check
     * \brief Triggers an nullptr check for all pointer dereferencing operators
     *
     * This attribute marks a join point, on which the Nullptrcheck aspect should be applied.
     */
    attribute null_check();

    /**
     * \attribute acp::ignore_null_check
     * \brief This attribute can be used to exclude certain join points form being affected by this aspect.
     *
     * If a scope already is annotated with this aspect's attribute, individual join points within can be
     * excluded with this attribute.
     */
    attribute ignore_null_check();
}

/**
 * \aspect NullptrCheck
 * \file /src/bug_detection/nullptr_check.ah
 * \brief Aspect that checks for null pointer dereferences.
 *
 * This aspect is used to detect an nullptr dereferencing, which would lead to a segfault.
 * In the case that such an potential segfault an exception will be triggered and the
 * dereferencing will not be performed.
 * Unfortunately, it does not work with the -> operator, due to limitations in the AspectC++
 * language and the way the builtin 'operator->' is defined.
 *
 * \see acp::NullptrException
 *
 */
aspect [[acp::middle_layer]] NullptrCheck : public CoreAspect {

    /**
     * \pointcut dereferencing_pointer
     * \brief The set of all builtin pointer dereferencing join points.
     */
    pointcut dereferencing_pointer() = builtin("%& operator *(%*)");

public:

    NullptrCheck() {}
    virtual ~NullptrCheck() = default;

    /**
     * \pointcut where
     * \see :ref:`CoreAspect::where <core_aspect_ah_where>`
     */
    pointcut virtual where() = within(acp::null_check());

    /**
     * \pointcut ignore
     * \see :ref:`CoreAspect::ignore <core_aspect_ah_ignore>`
     */
    pointcut virtual ignore() = within("NullptrCheck") || within("acp") || within(acp::ignore_null_check()) || within(acp::ignore_everything());

    /**
     * \advice nullptr_check
     * \brief This Advice checks if a pointer is null before dereferencing it.
     */
    advice where() && dereferencing_pointer() && !ignore(): before() {
        // Just casting to int* to check if the pointer is null.
        if (*((int *)tjp->arg(0)) == 0) {
            throw acp::NullptrException(tjp->signature(), tjp->line());
        }
    }


};

#endif // __ACP__NULLPTR_CHECK_AH__
